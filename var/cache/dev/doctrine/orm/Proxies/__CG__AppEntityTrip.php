<?php

namespace Proxies\__CG__\App\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Trip extends \App\Entity\Trip implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'objID', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'name', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'owner', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'startDate', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'endDate', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'locked', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'duration', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'tripDescription', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'tags', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'milestonesIDs', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'visibility', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'syncDate', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'mainImage', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'usersRoles', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'checkListsIDs', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'cost', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'costDescription', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'usersTrip'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'objID', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'name', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'owner', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'startDate', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'endDate', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'locked', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'duration', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'tripDescription', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'tags', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'milestonesIDs', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'visibility', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'syncDate', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'mainImage', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'usersRoles', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'checkListsIDs', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'cost', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'costDescription', '' . "\0" . 'App\\Entity\\Trip' . "\0" . 'usersTrip'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Trip $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getObjId(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getObjId', []);

        return parent::getObjId();
    }

    /**
     * {@inheritDoc}
     */
    public function setObjId(?string $objID): \App\Entity\Trip
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setObjId', [$objID]);

        return parent::setObjId($objID);
    }

    /**
     * {@inheritDoc}
     */
    public function getName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName(?string $name): \App\Entity\Trip
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getOwner(): ?\App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOwner', []);

        return parent::getOwner();
    }

    /**
     * {@inheritDoc}
     */
    public function setOwner(?\App\Entity\User $owner): \App\Entity\Trip
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOwner', [$owner]);

        return parent::setOwner($owner);
    }

    /**
     * {@inheritDoc}
     */
    public function getStartDate(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStartDate', []);

        return parent::getStartDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setStartDate(\DateTimeInterface $startDate): \App\Entity\Trip
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStartDate', [$startDate]);

        return parent::setStartDate($startDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getEndDate(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEndDate', []);

        return parent::getEndDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setEndDate(\DateTimeInterface $endDate): \App\Entity\Trip
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEndDate', [$endDate]);

        return parent::setEndDate($endDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getLocked(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocked', []);

        return parent::getLocked();
    }

    /**
     * {@inheritDoc}
     */
    public function setLocked(bool $locked): \App\Entity\Trip
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLocked', [$locked]);

        return parent::setLocked($locked);
    }

    /**
     * {@inheritDoc}
     */
    public function getDuration(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDuration', []);

        return parent::getDuration();
    }

    /**
     * {@inheritDoc}
     */
    public function setDuration(?int $duration): \App\Entity\Trip
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDuration', [$duration]);

        return parent::setDuration($duration);
    }

    /**
     * {@inheritDoc}
     */
    public function getTripDescription(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTripDescription', []);

        return parent::getTripDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setTripDescription(?string $tripDescription): \App\Entity\Trip
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTripDescription', [$tripDescription]);

        return parent::setTripDescription($tripDescription);
    }

    /**
     * {@inheritDoc}
     */
    public function getTags(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTags', []);

        return parent::getTags();
    }

    /**
     * {@inheritDoc}
     */
    public function setTags(?string $tags): \App\Entity\Trip
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTags', [$tags]);

        return parent::setTags($tags);
    }

    /**
     * {@inheritDoc}
     */
    public function getMilestonesIDs(): ?array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMilestonesIDs', []);

        return parent::getMilestonesIDs();
    }

    /**
     * {@inheritDoc}
     */
    public function setMilestonesIDs(?array $milestonesIDs): \App\Entity\Trip
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMilestonesIDs', [$milestonesIDs]);

        return parent::setMilestonesIDs($milestonesIDs);
    }

    /**
     * {@inheritDoc}
     */
    public function getVisibility(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVisibility', []);

        return parent::getVisibility();
    }

    /**
     * {@inheritDoc}
     */
    public function setVisibility(bool $visibility): \App\Entity\Trip
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVisibility', [$visibility]);

        return parent::setVisibility($visibility);
    }

    /**
     * {@inheritDoc}
     */
    public function getSyncDate(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSyncDate', []);

        return parent::getSyncDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setSyncDate(?\DateTimeInterface $syncDate): \App\Entity\Trip
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSyncDate', [$syncDate]);

        return parent::setSyncDate($syncDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getMainImage(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMainImage', []);

        return parent::getMainImage();
    }

    /**
     * {@inheritDoc}
     */
    public function setMainImage(?string $mainImage): \App\Entity\Trip
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMainImage', [$mainImage]);

        return parent::setMainImage($mainImage);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsersRoles(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsersRoles', []);

        return parent::getUsersRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function addUsersRole(\App\Entity\TripUserRole $usersRole): \App\Entity\Trip
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addUsersRole', [$usersRole]);

        return parent::addUsersRole($usersRole);
    }

    /**
     * {@inheritDoc}
     */
    public function removeUsersRole(\App\Entity\TripUserRole $usersRole): \App\Entity\Trip
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUsersRole', [$usersRole]);

        return parent::removeUsersRole($usersRole);
    }

    /**
     * {@inheritDoc}
     */
    public function getCheckListsIDs(): ?array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCheckListsIDs', []);

        return parent::getCheckListsIDs();
    }

    /**
     * {@inheritDoc}
     */
    public function setCheckListsIDs(?array $checkListsIDs): \App\Entity\Trip
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCheckListsIDs', [$checkListsIDs]);

        return parent::setCheckListsIDs($checkListsIDs);
    }

    /**
     * {@inheritDoc}
     */
    public function getCost(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCost', []);

        return parent::getCost();
    }

    /**
     * {@inheritDoc}
     */
    public function setCost(?string $cost): \App\Entity\Trip
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCost', [$cost]);

        return parent::setCost($cost);
    }

    /**
     * {@inheritDoc}
     */
    public function getCostDescription(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCostDescription', []);

        return parent::getCostDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setCostDescription(?string $costDescription): \App\Entity\Trip
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCostDescription', [$costDescription]);

        return parent::setCostDescription($costDescription);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsersTrip(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsersTrip', []);

        return parent::getUsersTrip();
    }

}
